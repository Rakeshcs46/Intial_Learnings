tory, or
when you cloned an existing project, you created a
repository
The repository is a subdirectory named .git containing various
files
The dot indicates a “hidden” directory
You do not work directly with the contents of that directory;
various git commands do that for you
14
Making commits
 You do your work in your project directory, as usual
 If you create new files and/or folders, they are not tracked by Git unless you ask it to do so
 git add newFile1 newFolder1 newFolder2 newFile2
 Committing makes a “snapshot” of everything being tracked into your repository
 A message telling what you have done is required
 git commit –m “Uncrevulated the conundrum bar”
 git commit
 This version opens an editor for you the enter the message
 To finish, save and quit the editor
 Format of the commit message
 One line containing the complete summary
 If more than one line, the second line must be blank
15
Commits and graphs
 A commit is when you tell git that a change (or addition) you have made is
ready to be included in the project
 When you commit your change to git, it creates a commit object
 A commit object represents the complete state of the project, including all the files in
the project
 The very first commit object has no “parents”
 Usually, you take some commit object, make some changes, and create a new commit
object; the original commit object is the parent of the new commit object
 Hence, most commit objects have a single parent
 You can also merge two commit objects to form a new one
 The new commit object has two parents
 Hence, commit objects forms a directed graph
 Git is all about using and manipulating this graph
16
Commit messages
 In git, “Commits are cheap.” Do them often.
 When you commit, you must provide a one-line message
stating what you have done
Terrible message: “Fixed a bunch of things”
Better message: “Corrected the calculation of median scores”
 Commit messages can be very helpful, to yourself as well
as to your team members
 You can’t say much in one line, so commit often
17
Typical workflow
 git status
See what Git thinks is going on
Use this frequently!
 Work on your files
 git add your editfiles
 git commit –m “What I did”
18
Keeping it simple
 If you:
 Make sure you are current with the central repository
 Make some improvements to your code
 Update the central repository before anyone else does
 Then you don’t have to worry about resolving conflicts or working
with multiple branches
 All the complexity in git comes from dealing with these
 Therefore:
 Make sure you are up-to-date before starting to work
 Commit and update the central repository frequently
 If you need help: https://help.github.com/
19
More Commands: Don’t Get Scared.
GitHub Desktop can Help You
FUNDAMENTALS OF GITHUB
Introduce yourself to GitHub
 Register on GitHub
https://github.com/
 Authenticating to GitHub Desktop
https://help.github.com/desktop/guides/gettingstarted/authenticating-to-github/
 Configuring Git for GitHub Desktop
https://help.github.com/desktop/guides/gettingstarted/configuring-git-for-github-desktop/
Create or add a repository to GitHub
 Create a new repository on GitHub
https://help.github.com/articles/create-a-repo/
 From GitHub Desktop, then Publish to GitHub
https://help.github.com/desktop/guides/contributing/adding-arepository-from-your-local-computer-to-github-desktop/
Remember to Publish, otherwise your repository would not
appear on the GitHub website.
Commit your changes on GitHub
 From GitHub Website
https://help.github.com/articles/create-a-repo/
 From GitHub Desktop
https://help.github.com/desktop/guides/contributing/committingand-reviewing-changes-to-your-project/
Creating a branch for your work
 A branch is a parallel version of the main line of
development in the repository, or the default branch
(usually master). Use branches to
 Develop features
 Fix bugs
 Safely experiment with new ideas
 From the GitHub Website
 https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/
 From the GitHub Desktop
 https://help.github.com/desktop/guides/contributing/creating-a-branch-for-your-work/
Synchronizing your branch
 As commits are pushed to your project on GitHub, you
can keep your local copy of the project in sync with the
remote repository.
https://help.github.com/desktop/guides/contributing/syncingyour-branch/
Viewing the history of your commits
 When you click a commit on the commit timeline, you can
see more details about the commit, including a diff of the
changes the commit introduced.
 Each commit shows:
The commit message
The time the commit was created
The committer's username and profile photo (if available)
The commit's SHA-1 hash (the unique ID)
